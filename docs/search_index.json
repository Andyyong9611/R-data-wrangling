[["index.html", "Data Wrangling with R Prerequisites and Preparations References Acknowledgements", " Data Wrangling with R Claudia A Engel Last updated: February 18, 2021 Prerequisites and Preparations You should have some basic knowledge of R, and be familiar with the topics covered in the Introduction to R. Have a recent version of R and RStudio installed. Install and load the tidyverse package. install.packages(&quot;tidyverse&quot;) library(tidyverse) Create a new RStudio project R-data-ws in a new folder R-data-ws. Download both CSV files into a subdirectory called data like this: Download MS_trafficstops_bw_age.csv: download.file(&quot;http://bit.ly/MS_trafficstops_bw_age&quot;, &quot;data/MS_trafficstops_bw_age.csv&quot;) Download MS_acs2015_bw.csv: download.file(&quot;http://bit.ly/MS_acs_2015_bw&quot;, &quot;data/MS_acs2015_bw.csv&quot;) References Boehmke, Bradley C. (2016) Data Wrangling with R http://link.springer.com/book/10.1007%2F978-3-319-45599-0 Grolemund, G &amp; Wickham, H (2017): R for Data Science http://r4ds.had.co.nz Wickham, H. (2014): Tidy Data https://www.jstatsoft.org/article/view/v059i10 Acknowledgements Part of the materials for this tutorial are adapted from http://datacarpentry.org and http://softwarecarpentry.org. "],["dplyr.html", "Chapter 1 Data Manipulation using dplyr 1.1 What is dplyr? 1.2 Subsetting columns and rows 1.3 Pipes 1.4 Add new columns 1.5 What is split-apply-combine? 1.6 Tallying 1.7 Joining two tables", " Chapter 1 Data Manipulation using dplyr Learning Objectives Select columns in a data frame with the dplyr function select. Select rows in a data frame according to filtering conditions with the dplyr function filter. Direct the output of one dplyr function to the input of another function with the ‘pipe’ operator %&gt;%. Add new columns to a data frame that are functions of existing columns with mutate. Understand the split-apply-combine concept for data analysis. Use summarize, group_by, and count to split a data frame into groups of observations, apply a summary statistics for each group, and then combine the results. Join two tables by a common variable. Manipulation of data frames is a common task when you start exploring your data in R and dplyr is a package for making tabular data manipulation easier. Brief recap: Packages in R are sets of additional functions that let you do more stuff. Functions like str() or data.frame(), come built into R; packages give you access to more of them. Before you use a package for the first time you need to install it on your machine, and then you should import it in every subsequent R session when you need it. If you haven’t, please install the tidyverse package. install.packages(&quot;tidyverse&quot;) tidyverse is an “umbrella-package” that installs a series of packages useful for data analysis which work together well. Some of them are considered core packages (among them tidyr, dplyr, ggplot2), because you are likely to use them in almost every analysis. Other packages, like lubridate (to work wiht dates) or haven (for SPSS, Stata, and SAS data) that you are likely to use not for every analysis are also installed. If you type the following command, it will load the core tidyverse packages. library(&quot;tidyverse&quot;) ## load the core tidyverse packages, incl. dplyr If you need to use functions from tidyverse packages other than the core packages, you will need to load them separately. 1.1 What is dplyr? dplyr is one part of a larger tidyverse that enables you to work with data in tidy data formats. “Tidy datasets are easy to manipulate, model and visualise, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table.” (From Wickham, H. (2014): Tidy Data https://www.jstatsoft.org/article/view/v059i10) The package dplyr provides convenient tools for the most common data manipulation tasks. It is built to work directly with data frames, with many common tasks optimized by being written in a compiled language (C++). An additional feature is the ability to work directly with data stored in an external database. The benefits of doing this are that the data can be managed natively in a relational database, queries can be conducted on that database, and only the results of the query are returned. This addresses a common problem with R in that all operations are conducted in-memory and thus the amount of data you can work with is limited by available memory. The database connections essentially remove that limitation in that you can have a database of many 100s GB, conduct queries on it directly, and pull back into R only what you need for analysis. To learn more about dplyr after the workshop, you may want to check out the handy data transformation with dplyr cheatsheet. 1.2 Subsetting columns and rows Let’s begin with loading our sample data into a data frame. We will be working a small subset of the data from the Stanford Open Policing Project. It contains information about traffic stops for blacks and whites in the state of Mississippi during January 2013 to mid-July of 2016. stops &lt;- read_csv(&quot;data/MS_trafficstops_bw_age.csv&quot;) #&gt; Parsed with column specification: #&gt; cols( #&gt; id = col_character(), #&gt; stop_date = col_date(format = &quot;&quot;), #&gt; county_name = col_character(), #&gt; county_fips = col_double(), #&gt; police_department = col_character(), #&gt; driver_gender = col_character(), #&gt; driver_birthdate = col_date(format = &quot;&quot;), #&gt; driver_race = col_character(), #&gt; officer_id = col_character(), #&gt; driver_age = col_double(), #&gt; violation = col_character() #&gt; ) stops You may have noticed that by using read_csv we have generated an object of class tbl_df, also known as a “tibble.” Tibble’s data structure is very similar to a data frame. For our purposes the only differences are that * (1) columns of class character are never converted into factors, * (2) it tries to recognize and date types * (3) the output displays the data type of each column under its name, and * (4) it only prints the first few rows of data and only as many columns as fit on one screen. If we wanted to print all columns we can use the print command, and set the width parameter to Inf. To print the first 6 rows for example we would do this: print(my_tibble, n=6, width=Inf). To select columns of a data frame with dplyr, use select(). The first argument to this function is the data frame (stops), and the subsequent arguments are the columns to keep. select(stops, police_department, officer_id, driver_race) #&gt; # A tibble: 6 x 3 #&gt; police_department officer_id driver_race #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 Mississippi Highway Patrol J042 Black #&gt; 2 Mississippi Highway Patrol B026 Black #&gt; 3 Mississippi Highway Patrol M009 Black #&gt; 4 Mississippi Highway Patrol K035 White #&gt; 5 Mississippi Highway Patrol D028 White #&gt; 6 Mississippi Highway Patrol K023 White It is worth knowing that dplyr is backed by another package with a number of helper functions, which provide convenient functions to select columns based on their names. For example: #&gt; # A tibble: 211,211 x 4 #&gt; driver_gender driver_birthdate driver_race driver_age #&gt; &lt;chr&gt; &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 male 1950-06-14 Black 63 #&gt; 2 male 1967-04-06 Black 46 #&gt; 3 male 1974-04-15 Black 39 #&gt; 4 male 1981-03-23 White 32 #&gt; 5 male 1992-08-03 White 20 #&gt; 6 female 1960-05-02 White 53 #&gt; 7 female 1953-03-16 White 60 #&gt; 8 female 1993-06-14 White 20 #&gt; 9 male 1947-12-11 White 65 #&gt; 10 male 1984-07-14 White 28 #&gt; # … with 211,201 more rows Check out the tidyselect reference for more. To subset rows based on specific criteria, we use filter(): #&gt; # A tibble: 3,528 x 11 #&gt; id stop_date county_name county_fips police_departme… driver_gender #&gt; &lt;chr&gt; &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 MS-2… 2013-01-02 Yazoo 28163 Mississippi Hig… male #&gt; 2 MS-2… 2013-01-02 Yazoo 28163 Mississippi Hig… female #&gt; 3 MS-2… 2013-01-02 Yazoo 28163 Mississippi Hig… male #&gt; 4 MS-2… 2013-01-02 Yazoo 28163 Mississippi Hig… female #&gt; 5 MS-2… 2013-01-02 Yazoo 28163 Mississippi Hig… male #&gt; 6 MS-2… 2013-01-03 Yazoo 28163 Mississippi Hig… male #&gt; 7 MS-2… 2013-01-03 Yazoo 28163 Mississippi Hig… male #&gt; 8 MS-2… 2013-01-04 Yazoo 28163 Mississippi Hig… male #&gt; 9 MS-2… 2013-01-04 Yazoo 28163 Mississippi Hig… male #&gt; 10 MS-2… 2013-01-04 Yazoo 28163 Mississippi Hig… female #&gt; # … with 3,518 more rows, and 5 more variables: driver_birthdate &lt;date&gt;, #&gt; # driver_race &lt;chr&gt;, officer_id &lt;chr&gt;, driver_age &lt;dbl&gt;, violation &lt;chr&gt; Here are some other ways to subset rows: by row number: slice(stops, 1:3) # rows 1-3 rows with highest or lowest values of a variable: slice_min(stops, driver_age) # likewise slice_max() random rows: slice_sample(stops, n = 5) # number of rows to select slice_sample(stops, prop = .0001) # fraction of rows to select To sort rows by variables use the arrange function: arrange(stops, county_name, stop_date) #&gt; # A tibble: 211,211 x 11 #&gt; id stop_date county_name county_fips police_departme… driver_gender #&gt; &lt;chr&gt; &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 MS-2… 2013-02-09 Adams 28001 Mississippi Hig… male #&gt; 2 MS-2… 2013-03-02 Adams 28001 Mississippi Hig… female #&gt; 3 MS-2… 2013-03-16 Adams 28001 Mississippi Hig… female #&gt; 4 MS-2… 2013-03-20 Adams 28001 Mississippi Hig… female #&gt; 5 MS-2… 2013-04-06 Adams 28001 Mississippi Hig… female #&gt; 6 MS-2… 2013-04-13 Adams 28001 Mississippi Hig… female #&gt; 7 MS-2… 2013-04-19 Adams 28001 Mississippi Hig… female #&gt; 8 MS-2… 2013-04-21 Adams 28001 Mississippi Hig… female #&gt; 9 MS-2… 2013-04-24 Adams 28001 Mississippi Hig… male #&gt; 10 MS-2… 2013-04-24 Adams 28001 Mississippi Hig… male #&gt; # … with 211,201 more rows, and 5 more variables: driver_birthdate &lt;date&gt;, #&gt; # driver_race &lt;chr&gt;, officer_id &lt;chr&gt;, driver_age &lt;dbl&gt;, violation &lt;chr&gt; 1.3 Pipes What if you wanted to filter and select on the same data? For example, lets find drivers over 85 years and only keep the violation and gender columns. There are three ways to do this: use intermediate steps, nested functions, or pipes. Intermediate steps: With intermediate steps, you essentially create a temporary data frame and use that as input to the next function. This can clutter up your workspace with lots of objects. tmp_df &lt;- filter(stops, driver_age &gt; 85) select(tmp_df, violation, driver_gender) Nested functions You can also nest functions (i.e. placce one function inside of another). This is handy, but can be difficult to read if too many functions are nested as things are evaluated from the inside out. select(filter(stops, driver_age &gt; 85), violation, driver_gender) Pipes! The last option, called “pipes,” is the most recent addition to R. Pipes let you take the output of one function and send it directly to the next, which is useful when you need to do many things to the same dataset. Pipes in R look like %&gt;% and are made available via the magrittr package, which is installed automatically with dplyr. If you use RStudio, you can type the pipe with Ctrl + Shift + M if you have a PC or Cmd + Shift + M if you have a Mac. stops %&gt;% filter(driver_age &gt; 85) %&gt;% select(violation, driver_gender) In the above, we use the pipe to send the stops data first through filter() to keep rows where driver_race is Black, then through select() to keep only the officer_id and stop_date columns. Since %&gt;% takes the object on its left and passes it as the first argument to the function on its right, we don’t need to explicitly include it as an argument to the filter() and select() functions anymore. If we wanted to create a new object with this smaller version of the data, we could do so by assigning it a new name: senior_drivers &lt;- stops %&gt;% filter(driver_age &gt; 85) %&gt;% select(violation, driver_gender, driver_race) senior_drivers #&gt; # A tibble: 3 x 3 #&gt; violation driver_gender driver_race #&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; #&gt; 1 Seat belt male White #&gt; 2 Speeding male White #&gt; 3 Seat belt male Black Note that the final data frame is the leftmost part of this expression. Challenge Using pipes, subset the stops data to include stops in Tunica county only and retain the columns stop_date, driver_age, and violation. Bonus: sort the table by driver age. 1.4 Add new columns Frequently you’ll want to create new columns based on the values in existing columns or. For this we’ll use mutate(). We can also reassign values to an existing column with that function. Be aware that new and edited columns will not permanently be added to the existing data frame – unless we explicitly save the output. So here is an example using the year() function from the lubrudate package to extract the year of the drivers’ birthdate: library(lubridate) stops %&gt;% mutate(birth_year = year(driver_birthdate)) We can keep adding columns like this: stops %&gt;% mutate(birth_year = year(driver_birthdate), birth_cohort = round(birth_year/10)*10) We are beginning to see the power of piping. Here is a slightly expanded example, where we select the column birth_cohort that we have created and send it to plot: stops %&gt;% mutate(birth_year = year(driver_birthdate), birth_cohort = round(birth_year/10)*10, birth_cohort = factor(birth_cohort)) %&gt;% select(birth_cohort) %&gt;% plot() Figure 1.1: Driver Birth Cohorts Mutate can also be used in conjunction with logical conditions. For example, we could create a new column, where we assign everyone born after the year 2000 to a group “millenial” and overyone before to “pre-millenial.” In order to do this we take advantage of the ifelse function: ifelse(a_logical_condition, if_true_return_this, if_false_return_this) In conjunction with mutate, this works like this: stops %&gt;% mutate(cohort = ifelse(year(driver_birthdate) &lt; 2000, &quot;pre-millenial&quot;, &quot;millenial&quot;)) %&gt;% count(cohort) #&gt; # A tibble: 3 x 2 #&gt; cohort n #&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 millenial 41 #&gt; 2 pre-millenial 211061 #&gt; 3 &lt;NA&gt; 109 More advanced conditional recoding can be done with case_when(). Challenge Create a new data frame from the stops data that meets the following criteria: contains only the violation column for female drivers of age 50 that were stopped on a Sunday. For this add a new column to your data frame called weekday_of_stop containing the number of the weekday when the stop occurred. Use the wday() function from lubridate (Sunday = 1). Think about how the commands should be ordered to produce this data frame! 1.5 What is split-apply-combine? Many data analysis tasks can be approached using the split-apply-combine paradigm: split the data into groups, apply some analysis to each group, and then combine the results. Figure 1.2: Split - Apply - Combine dplyr makes this possible through the use of the group_by() function. group_by() is often used together with summarize(), which collapses each group into a single-row summary of that group. group_by() takes as arguments the column names that contain the categorical variables for which you want to calculate the summary statistics. So to view the mean age for black and white drivers: stops %&gt;% group_by(driver_race) %&gt;% summarize(mean_age = mean(driver_age, na.rm=TRUE)) #&gt; `summarise()` ungrouping output (override with `.groups` argument) #&gt; # A tibble: 3 x 2 #&gt; driver_race mean_age #&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Black 34.2 #&gt; 2 White 36.2 #&gt; 3 &lt;NA&gt; 34.5 You can also group by multiple columns: stops %&gt;% group_by(county_name, driver_race) %&gt;% summarize(mean_age = mean(driver_age, na.rm=TRUE)) #&gt; `summarise()` regrouping output by &#39;county_name&#39; (override with `.groups` argument) #&gt; # A tibble: 178 x 3 #&gt; # Groups: county_name [82] #&gt; county_name driver_race mean_age #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Adams Black 36.2 #&gt; 2 Adams White 40.0 #&gt; 3 Alcorn Black 34.6 #&gt; 4 Alcorn White 33.6 #&gt; 5 Amite Black 37.5 #&gt; 6 Amite White 42.1 #&gt; 7 Amite &lt;NA&gt; 24 #&gt; 8 Attala Black 36.4 #&gt; 9 Attala White 38.6 #&gt; 10 Benton Black 34.7 #&gt; # … with 168 more rows If we wanted to remove the line with NA we could insert a filter() in the chain: stops %&gt;% filter(!is.na(driver_race)) %&gt;% group_by(county_name, driver_race) %&gt;% summarize(mean_age = mean(driver_age, na.rm=TRUE)) #&gt; `summarise()` regrouping output by &#39;county_name&#39; (override with `.groups` argument) #&gt; # A tibble: 163 x 3 #&gt; # Groups: county_name [82] #&gt; county_name driver_race mean_age #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; #&gt; 1 Adams Black 36.2 #&gt; 2 Adams White 40.0 #&gt; 3 Alcorn Black 34.6 #&gt; 4 Alcorn White 33.6 #&gt; 5 Amite Black 37.5 #&gt; 6 Amite White 42.1 #&gt; 7 Attala Black 36.4 #&gt; 8 Attala White 38.6 #&gt; 9 Benton Black 34.7 #&gt; 10 Benton White 32.0 #&gt; # … with 153 more rows Recall that is.na() is a function that determines whether something is an NA. The ! symbol negates the result, so we’re asking for everything that is not an NA. Once the data are grouped, you can also summarize multiple variables at the same time (and not necessarily on the same variable). For instance, we could add a column indicating the minimum age in each group (i.e. county): stops %&gt;% filter(!is.na(driver_race)) %&gt;% group_by(county_name, driver_race) %&gt;% summarize(mean_age = mean(driver_age, na.rm=TRUE), min_age = min(driver_age, na.rm=TRUE)) #&gt; `summarise()` regrouping output by &#39;county_name&#39; (override with `.groups` argument) #&gt; # A tibble: 163 x 4 #&gt; # Groups: county_name [82] #&gt; county_name driver_race mean_age min_age #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Adams Black 36.2 16 #&gt; 2 Adams White 40.0 16 #&gt; 3 Alcorn Black 34.6 17 #&gt; 4 Alcorn White 33.6 15 #&gt; 5 Amite Black 37.5 17 #&gt; 6 Amite White 42.1 15 #&gt; 7 Attala Black 36.4 8 #&gt; 8 Attala White 38.6 15 #&gt; 9 Benton Black 34.7 18 #&gt; 10 Benton White 32.0 18 #&gt; # … with 153 more rows 1.6 Tallying When working with data, it is also common to want to know the number of observations found for categorical variables. For this, dplyr provides count(). For example, if we wanted to see how many traffic stops each officer recorded: stops %&gt;% count(officer_id) Bu default, count will name the column with the counts n. We can change this by explicitly providing a value for the name argument: stops %&gt;% count(officer_id, name = &quot;n_stops&quot;) We can optionally sort the results in descending order by adding sort=TRUE: stops %&gt;% count(officer_id, name = &quot;n_stops&quot;, sort = TRUE) count() calls group_by() transparently before counting the total number of records for each category. Similarly, we can count subgroups within groups: stops %&gt;% count(officer_id, violation, name = &quot;n_stops&quot;) Alternatives: stops %&gt;% group_by(officer_id) %&gt;% tally(sort = TRUE) # tally() requires group_by before counting stops %&gt;% group_by(officer_id) %&gt;% summarize(n = n()) %&gt;% # n() is useful when the count is needed within a calculation arrange(desc(n)) Challenge Which 5 counties were the ones with the most stops in 2013? Hint: use the year() function from lubridate. 1.7 Joining two tables It is not uncommon that we have our data spread out in different tables and need to bring those together for analysis. In this example we will combine the numbers of stops for black and white drivers per county together with the numbers of the black and white total population for these counties. The population data are the estimated values of the 5 year average from the 2011-2015 American Community Survey (ACS): acs &lt;- read_csv(&quot;data/MS_acs2015_bw.csv&quot;) #&gt; Parsed with column specification: #&gt; cols( #&gt; County = col_character(), #&gt; FIPS = col_double(), #&gt; black_pop = col_double(), #&gt; white_pop = col_double(), #&gt; bw_pop = col_double() #&gt; ) acs #&gt; # A tibble: 82 x 5 #&gt; County FIPS black_pop white_pop bw_pop #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Jones 28067 19711 47154 66865 #&gt; 2 Lauderdale 28075 33893 43482 77375 #&gt; 3 Pike 28113 21028 18282 39310 #&gt; 4 Hancock 28045 4172 39686 43858 #&gt; 5 Holmes 28051 15498 3105 18603 #&gt; 6 Jackson 28059 30704 101686 132390 #&gt; 7 Grenada 28043 9417 11991 21408 #&gt; 8 Scott 28123 10562 16920 27482 #&gt; 9 Wayne 28153 8015 12154 20169 #&gt; 10 Bolivar 28011 21648 11197 32845 #&gt; # … with 72 more rows In a first step we count all the stops per county. stops %&gt;% count(county_name, name = &quot;n_stops&quot;) #&gt; # A tibble: 82 x 2 #&gt; county_name n_stops #&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 Adams 942 #&gt; 2 Alcorn 3345 #&gt; 3 Amite 2921 #&gt; 4 Attala 4203 #&gt; 5 Benton 214 #&gt; 6 Bolivar 4526 #&gt; 7 Calhoun 1658 #&gt; 8 Carroll 1788 #&gt; 9 Chickasaw 3869 #&gt; 10 Choctaw 613 #&gt; # … with 72 more rows We will then pipe this into our next operation where we bring the two tables together. We will use left_join, which returns all rows from the left table, and all columns from the left and the right table. As ID, which uniquely identifies the corresponding records in each table we use the County names. stops %&gt;% count(county_name, name = &quot;n_stops&quot;) %&gt;% left_join(acs, by = c(&quot;county_name&quot; = &quot;County&quot;)) #&gt; # A tibble: 82 x 6 #&gt; county_name n_stops FIPS black_pop white_pop bw_pop #&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Adams 942 28001 17757 12856 30613 #&gt; 2 Alcorn 3345 28003 4281 31563 35844 #&gt; 3 Amite 2921 28005 5416 7395 12811 #&gt; 4 Attala 4203 28007 8194 10649 18843 #&gt; 5 Benton 214 28009 3078 5166 8244 #&gt; 6 Bolivar 4526 28011 21648 11197 32845 #&gt; 7 Calhoun 1658 28013 3991 10103 14094 #&gt; 8 Carroll 1788 28015 3470 6702 10172 #&gt; 9 Chickasaw 3869 28017 7549 9522 17071 #&gt; 10 Choctaw 613 28019 2596 5661 8257 #&gt; # … with 72 more rows Now we can, for example calculate the stop rate, i.e. the proportion of the population that gets stopped in each county. Challenge Which county has the highest and which one the lowest stop rate? Use the snippet from above and pipe into the additional operations to do this. dplyr join functions are generally equivalent to merge from the base command, but there are a few advantages: rows are kept in existing order it runs faster tells you what keys you’re merging by (if you don’t supply them) also works with database tables. https://groups.google.com/d/msg/manipulatr/OuAPC4VyfIc/Qnt8mDfq0WwJ See ?dplyr::join for all the possible joins. "],["tidyr.html", "Chapter 2 Data Manipulation using tidyr 2.1 About long and wide table format 2.2 Long to Wide with pivot_wider 2.3 Wide to long with pivot_longer 2.4 Exporting data", " Chapter 2 Data Manipulation using tidyr Learning Objectives Understand the concept of a wide and a long table format and for which purpose those formats are useful. Understand what key-value pairs are. Reshape a data frame from long to wide format and back with the pivot_wider and pivot_longer commands from the tidyr package. Export a data frame to a .csv file. dplyr pairs nicely with tidyr which enables you to swiftly convert between different data formats for plotting and analysis. The package tidyr addresses the common problem of wanting to reshape your data for plotting and use by different R functions. Sometimes we want data sets where we have one row per observation. Sometimes we want a data frame where each observation type has its own column, and rows are instead more aggregated groups - like surveys, where each column represents an answer. Moving back and forth between these formats is nontrivial, and tidyr gives you tools for this and more sophisticated data manipulation. To learn more about tidyr after the workshop, you may want to check out this cheatsheet about tidyr. 2.1 About long and wide table format The ‘long’ format is where: each column is a variable each row is an observation In the ‘long’ format, you usually have 1 column for the observed variable and the other columns are ID variables. For the ‘wide’ format a row, for example could be a reserarch subject for which you have multiple observation variables containing the same type of data, for example responses to a set of survey questions, or repeated observations over time, or a mix of both. Here is an example: You may find data input may be simpler or some other applications may prefer the ‘wide’ format. However, many of R‘s functions have been designed assuming you have ’long’ format data. This tutorial will help you efficiently transform your data regardless of original format. Figure 2.1: Wide vs. Long Table Format The choice of data format affects readability. For humans, the wide format is often more intuitive, since we can often see more of the data on the screen due to its shape. However, the long format is more machine readable and is closer to the formatting of databases. The ID variables in our dataframes are similar to the fields in a database and observed variables are like the database values. Challenge 1 Is stops in a long or wide format? 2.2 Long to Wide with pivot_wider Now let’s see this in action. First, using dplyr, let’s create a data frame with the counts of different violations for each county: violations &lt;- stops %&gt;% count(county_name, violation) violations #&gt; county_name violation n #&gt; 1 Adams Breaks-Lights-etc 7 #&gt; 2 Adams Careless driving 48 #&gt; 3 Adams License-Permit-Insurance 118 #&gt; 4 Adams Other or unknown 35 #&gt; 5 Adams Seat belt 229 #&gt; 6 Adams Speeding 505 #&gt; 7 Alcorn Breaks-Lights-etc 62 #&gt; 8 Alcorn Careless driving 100 #&gt; 9 Alcorn License-Permit-Insurance 737 #&gt; 10 Alcorn Other or unknown 418 #&gt; 11 Alcorn Seat belt 629 #&gt; 12 Alcorn Speeding 1399 #&gt; 13 Amite Breaks-Lights-etc 47 #&gt; 14 Amite Careless driving 86 #&gt; 15 Amite License-Permit-Insurance 370 #&gt; 16 Amite Other or unknown 143 #&gt; 17 Amite Seat belt 336 #&gt; 18 Amite Speeding 1939 #&gt; 19 Attala Breaks-Lights-etc 99 #&gt; 20 Attala Careless driving 113 #&gt; 21 Attala License-Permit-Insurance 526 #&gt; 22 Attala Other or unknown 155 #&gt; 23 Attala Seat belt 748 #&gt; 24 Attala Speeding 2562 #&gt; 25 Benton Breaks-Lights-etc 3 #&gt; 26 Benton Careless driving 9 #&gt; 27 Benton License-Permit-Insurance 73 #&gt; 28 Benton Other or unknown 26 #&gt; 29 Benton Seat belt 29 #&gt; 30 Benton Speeding 74 #&gt; 31 Bolivar Breaks-Lights-etc 57 #&gt; 32 Bolivar Careless driving 139 #&gt; 33 Bolivar License-Permit-Insurance 1034 #&gt; 34 Bolivar Other or unknown 254 #&gt; 35 Bolivar Seat belt 729 #&gt; 36 Bolivar Speeding 2313 #&gt; 37 Calhoun Breaks-Lights-etc 26 #&gt; 38 Calhoun Careless driving 38 #&gt; 39 Calhoun License-Permit-Insurance 383 #&gt; 40 Calhoun Other or unknown 102 #&gt; 41 Calhoun Seat belt 150 #&gt; 42 Calhoun Speeding 959 #&gt; 43 Carroll Breaks-Lights-etc 26 #&gt; 44 Carroll Careless driving 40 #&gt; 45 Carroll License-Permit-Insurance 323 #&gt; 46 Carroll Other or unknown 103 #&gt; 47 Carroll Seat belt 158 #&gt; 48 Carroll Speeding 1138 #&gt; 49 Chickasaw Breaks-Lights-etc 42 #&gt; 50 Chickasaw Careless driving 53 #&gt; 51 Chickasaw License-Permit-Insurance 1378 #&gt; 52 Chickasaw Other or unknown 232 #&gt; 53 Chickasaw Seat belt 442 #&gt; 54 Chickasaw Speeding 1722 #&gt; 55 Choctaw Breaks-Lights-etc 8 #&gt; 56 Choctaw Careless driving 6 #&gt; 57 Choctaw License-Permit-Insurance 73 #&gt; 58 Choctaw Other or unknown 24 #&gt; 59 Choctaw Seat belt 18 #&gt; 60 Choctaw Speeding 484 #&gt; 61 Claiborne Breaks-Lights-etc 25 #&gt; 62 Claiborne Careless driving 39 #&gt; 63 Claiborne License-Permit-Insurance 102 #&gt; 64 Claiborne Other or unknown 162 #&gt; 65 Claiborne Seat belt 177 #&gt; 66 Claiborne Speeding 882 #&gt; 67 Clarke Breaks-Lights-etc 8 #&gt; 68 Clarke Careless driving 15 #&gt; 69 Clarke License-Permit-Insurance 169 #&gt; 70 Clarke Other or unknown 66 #&gt; 71 Clarke Seat belt 33 #&gt; 72 Clarke Speeding 294 #&gt; 73 Clay Breaks-Lights-etc 39 #&gt; 74 Clay Careless driving 48 #&gt; 75 Clay License-Permit-Insurance 424 #&gt; 76 Clay Other or unknown 86 #&gt; 77 Clay Seat belt 105 #&gt; 78 Clay Speeding 279 #&gt; 79 Coahoma Breaks-Lights-etc 17 #&gt; 80 Coahoma Careless driving 55 #&gt; 81 Coahoma License-Permit-Insurance 410 #&gt; 82 Coahoma Other or unknown 440 #&gt; 83 Coahoma Seat belt 401 #&gt; 84 Coahoma Speeding 1268 #&gt; 85 Copiah Breaks-Lights-etc 140 #&gt; 86 Copiah Careless driving 215 #&gt; 87 Copiah License-Permit-Insurance 993 #&gt; 88 Copiah Other or unknown 337 #&gt; 89 Copiah Seat belt 850 #&gt; 90 Copiah Speeding 3551 #&gt; 91 Covington Breaks-Lights-etc 11 #&gt; 92 Covington Careless driving 66 #&gt; 93 Covington License-Permit-Insurance 714 #&gt; 94 Covington Other or unknown 135 #&gt; 95 Covington Seat belt 98 #&gt; 96 Covington Speeding 874 #&gt; 97 DeSoto Breaks-Lights-etc 40 #&gt; 98 DeSoto Careless driving 61 #&gt; 99 DeSoto License-Permit-Insurance 187 #&gt; 100 DeSoto Other or unknown 123 #&gt; 101 DeSoto Seat belt 145 #&gt; 102 DeSoto Speeding 647 #&gt; 103 Forrest Breaks-Lights-etc 57 #&gt; 104 Forrest Careless driving 264 #&gt; 105 Forrest License-Permit-Insurance 969 #&gt; 106 Forrest Other or unknown 457 #&gt; 107 Forrest Seat belt 261 #&gt; 108 Forrest Speeding 2427 #&gt; 109 Franklin Breaks-Lights-etc 26 #&gt; 110 Franklin Careless driving 61 #&gt; 111 Franklin License-Permit-Insurance 408 #&gt; 112 Franklin Other or unknown 155 #&gt; 113 Franklin Seat belt 339 #&gt; 114 Franklin Speeding 1518 #&gt; 115 George Breaks-Lights-etc 33 #&gt; 116 George Careless driving 88 #&gt; 117 George License-Permit-Insurance 820 #&gt; 118 George Other or unknown 360 #&gt; 119 George Seat belt 355 #&gt; 120 George Speeding 3122 #&gt; 121 Greene Breaks-Lights-etc 5 #&gt; 122 Greene Careless driving 35 #&gt; 123 Greene License-Permit-Insurance 148 #&gt; 124 Greene Other or unknown 57 #&gt; 125 Greene Seat belt 21 #&gt; 126 Greene Speeding 787 #&gt; 127 Grenada Breaks-Lights-etc 33 #&gt; 128 Grenada Careless driving 45 #&gt; 129 Grenada License-Permit-Insurance 506 #&gt; 130 Grenada Other or unknown 196 #&gt; 131 Grenada Seat belt 180 #&gt; 132 Grenada Speeding 1684 #&gt; 133 Hancock Breaks-Lights-etc 213 #&gt; 134 Hancock Careless driving 90 #&gt; 135 Hancock License-Permit-Insurance 344 #&gt; 136 Hancock Other or unknown 145 #&gt; 137 Hancock Seat belt 563 #&gt; 138 Hancock Speeding 2435 #&gt; 139 Harrison Breaks-Lights-etc 212 #&gt; 140 Harrison Careless driving 312 #&gt; 141 Harrison License-Permit-Insurance 1273 #&gt; 142 Harrison Other or unknown 443 #&gt; 143 Harrison Seat belt 306 #&gt; 144 Harrison Speeding 3550 #&gt; 145 Hinds Breaks-Lights-etc 136 #&gt; 146 Hinds Careless driving 264 #&gt; 147 Hinds License-Permit-Insurance 648 #&gt; 148 Hinds Other or unknown 695 #&gt; 149 Hinds Seat belt 609 #&gt; 150 Hinds Speeding 2641 #&gt; 151 Holmes Breaks-Lights-etc 23 #&gt; 152 Holmes Careless driving 91 #&gt; 153 Holmes License-Permit-Insurance 375 #&gt; 154 Holmes Other or unknown 228 #&gt; 155 Holmes Seat belt 350 #&gt; 156 Holmes Speeding 3249 #&gt; 157 Humphreys Breaks-Lights-etc 3 #&gt; 158 Humphreys Careless driving 8 #&gt; 159 Humphreys License-Permit-Insurance 199 #&gt; 160 Humphreys Other or unknown 35 #&gt; 161 Humphreys Seat belt 37 #&gt; 162 Humphreys Speeding 1836 #&gt; 163 Issaquena Breaks-Lights-etc 9 #&gt; 164 Issaquena Careless driving 4 #&gt; 165 Issaquena License-Permit-Insurance 23 #&gt; 166 Issaquena Other or unknown 261 #&gt; 167 Issaquena Seat belt 230 #&gt; 168 Issaquena Speeding 610 #&gt; 169 Itawamba Breaks-Lights-etc 66 #&gt; 170 Itawamba Careless driving 128 #&gt; 171 Itawamba License-Permit-Insurance 640 #&gt; 172 Itawamba Other or unknown 160 #&gt; 173 Itawamba Seat belt 740 #&gt; 174 Itawamba Speeding 747 #&gt; 175 Jackson Breaks-Lights-etc 111 #&gt; 176 Jackson Careless driving 532 #&gt; 177 Jackson License-Permit-Insurance 662 #&gt; 178 Jackson Other or unknown 490 #&gt; 179 Jackson Seat belt 669 #&gt; 180 Jackson Speeding 4295 #&gt; 181 Jasper Breaks-Lights-etc 13 #&gt; 182 Jasper Careless driving 46 #&gt; 183 Jasper License-Permit-Insurance 368 #&gt; 184 Jasper Other or unknown 109 #&gt; 185 Jasper Seat belt 81 #&gt; 186 Jasper Speeding 1391 #&gt; 187 Jefferson Breaks-Lights-etc 173 #&gt; 188 Jefferson Careless driving 98 #&gt; 189 Jefferson License-Permit-Insurance 670 #&gt; 190 Jefferson Other or unknown 315 #&gt; 191 Jefferson Seat belt 420 #&gt; 192 Jefferson Speeding 2536 #&gt; 193 Jefferson Davis Breaks-Lights-etc 4 #&gt; 194 Jefferson Davis Careless driving 46 #&gt; 195 Jefferson Davis License-Permit-Insurance 225 #&gt; 196 Jefferson Davis Other or unknown 47 #&gt; 197 Jefferson Davis Seat belt 29 #&gt; 198 Jefferson Davis Speeding 607 #&gt; 199 Jones Breaks-Lights-etc 22 #&gt; 200 Jones Careless driving 162 #&gt; 201 Jones License-Permit-Insurance 674 #&gt; 202 Jones Other or unknown 257 #&gt; 203 Jones Seat belt 300 #&gt; 204 Jones Speeding 2418 #&gt; 205 Kemper Breaks-Lights-etc 24 #&gt; 206 Kemper Careless driving 16 #&gt; 207 Kemper License-Permit-Insurance 129 #&gt; 208 Kemper Other or unknown 105 #&gt; 209 Kemper Seat belt 109 #&gt; 210 Kemper Speeding 2117 #&gt; 211 Lafayette Breaks-Lights-etc 12 #&gt; 212 Lafayette Careless driving 57 #&gt; 213 Lafayette License-Permit-Insurance 140 #&gt; 214 Lafayette Other or unknown 89 #&gt; 215 Lafayette Seat belt 261 #&gt; 216 Lafayette Speeding 610 #&gt; 217 Lamar Breaks-Lights-etc 31 #&gt; 218 Lamar Careless driving 99 #&gt; 219 Lamar License-Permit-Insurance 506 #&gt; 220 Lamar Other or unknown 264 #&gt; 221 Lamar Seat belt 150 #&gt; 222 Lamar Speeding 2315 #&gt; 223 Lauderdale Breaks-Lights-etc 50 #&gt; 224 Lauderdale Careless driving 354 #&gt; 225 Lauderdale License-Permit-Insurance 949 #&gt; 226 Lauderdale Other or unknown 535 #&gt; 227 Lauderdale Seat belt 403 #&gt; 228 Lauderdale Speeding 6504 #&gt; 229 Lawrence Breaks-Lights-etc 9 #&gt; 230 Lawrence Careless driving 13 #&gt; 231 Lawrence License-Permit-Insurance 108 #&gt; 232 Lawrence Other or unknown 39 #&gt; 233 Lawrence Seat belt 52 #&gt; 234 Lawrence Speeding 347 #&gt; 235 Leake Breaks-Lights-etc 16 #&gt; 236 Leake Careless driving 57 #&gt; 237 Leake License-Permit-Insurance 322 #&gt; 238 Leake Other or unknown 81 #&gt; 239 Leake Seat belt 131 #&gt; 240 Leake Speeding 2390 #&gt; 241 Lee Breaks-Lights-etc 97 #&gt; 242 Lee Careless driving 182 #&gt; 243 Lee License-Permit-Insurance 833 #&gt; 244 Lee Other or unknown 202 #&gt; 245 Lee Seat belt 937 #&gt; 246 Lee Speeding 2709 #&gt; 247 Leflore Breaks-Lights-etc 45 #&gt; 248 Leflore Careless driving 59 #&gt; 249 Leflore License-Permit-Insurance 611 #&gt; 250 Leflore Other or unknown 153 #&gt; 251 Leflore Seat belt 195 #&gt; 252 Leflore Speeding 611 #&gt; 253 Lincoln Breaks-Lights-etc 22 #&gt; 254 Lincoln Careless driving 83 #&gt; 255 Lincoln License-Permit-Insurance 264 #&gt; 256 Lincoln Other or unknown 100 #&gt; 257 Lincoln Seat belt 408 #&gt; 258 Lincoln Speeding 2951 #&gt; 259 Lowndes Breaks-Lights-etc 28 #&gt; 260 Lowndes Careless driving 130 #&gt; 261 Lowndes License-Permit-Insurance 456 #&gt; 262 Lowndes Other or unknown 71 #&gt; 263 Lowndes Seat belt 235 #&gt; 264 Lowndes Speeding 2290 #&gt; 265 Madison Breaks-Lights-etc 50 #&gt; 266 Madison Careless driving 73 #&gt; 267 Madison License-Permit-Insurance 270 #&gt; 268 Madison Other or unknown 79 #&gt; 269 Madison Seat belt 86 #&gt; 270 Madison Speeding 1451 #&gt; 271 Marion Breaks-Lights-etc 7 #&gt; 272 Marion Careless driving 13 #&gt; 273 Marion License-Permit-Insurance 103 #&gt; 274 Marion Other or unknown 22 #&gt; 275 Marion Seat belt 28 #&gt; 276 Marion Speeding 66 #&gt; 277 Marshall Breaks-Lights-etc 14 #&gt; 278 Marshall Careless driving 8 #&gt; 279 Marshall License-Permit-Insurance 40 #&gt; 280 Marshall Other or unknown 38 #&gt; 281 Marshall Seat belt 40 #&gt; 282 Marshall Speeding 80 #&gt; 283 Monroe Breaks-Lights-etc 190 #&gt; 284 Monroe Careless driving 200 #&gt; 285 Monroe License-Permit-Insurance 2889 #&gt; 286 Monroe Other or unknown 549 #&gt; 287 Monroe Seat belt 1300 #&gt; 288 Monroe Speeding 5341 #&gt; 289 Montgomery Breaks-Lights-etc 79 #&gt; 290 Montgomery Careless driving 69 #&gt; 291 Montgomery License-Permit-Insurance 573 #&gt; 292 Montgomery Other or unknown 150 #&gt; 293 Montgomery Seat belt 187 #&gt; 294 Montgomery Speeding 2325 #&gt; 295 Neshoba Breaks-Lights-etc 1 #&gt; 296 Neshoba Careless driving 3 #&gt; 297 Neshoba License-Permit-Insurance 19 #&gt; 298 Neshoba Other or unknown 20 #&gt; 299 Neshoba Seat belt 4 #&gt; 300 Neshoba Speeding 30 #&gt; 301 Newton Breaks-Lights-etc 28 #&gt; 302 Newton Careless driving 50 #&gt; 303 Newton License-Permit-Insurance 334 #&gt; 304 Newton Other or unknown 254 #&gt; 305 Newton Seat belt 308 #&gt; 306 Newton Speeding 1511 #&gt; 307 Noxubee Breaks-Lights-etc 1 #&gt; 308 Noxubee Careless driving 1 #&gt; 309 Noxubee License-Permit-Insurance 10 #&gt; 310 Noxubee Other or unknown 5 #&gt; 311 Noxubee Seat belt 2 #&gt; 312 Noxubee Speeding 11 #&gt; 313 Oktibbeha Breaks-Lights-etc 13 #&gt; 314 Oktibbeha Careless driving 69 #&gt; 315 Oktibbeha License-Permit-Insurance 818 #&gt; 316 Oktibbeha Other or unknown 151 #&gt; 317 Oktibbeha Seat belt 215 #&gt; 318 Oktibbeha Speeding 2734 #&gt; 319 Panola Breaks-Lights-etc 15 #&gt; 320 Panola Careless driving 100 #&gt; 321 Panola License-Permit-Insurance 206 #&gt; 322 Panola Other or unknown 77 #&gt; 323 Panola Seat belt 387 #&gt; 324 Panola Speeding 969 #&gt; 325 Pearl River Breaks-Lights-etc 16 #&gt; 326 Pearl River Careless driving 14 #&gt; 327 Pearl River License-Permit-Insurance 301 #&gt; 328 Pearl River Other or unknown 166 #&gt; 329 Pearl River Seat belt 32 #&gt; 330 Pearl River Speeding 316 #&gt; 331 Perry Breaks-Lights-etc 6 #&gt; 332 Perry Careless driving 5 #&gt; 333 Perry License-Permit-Insurance 65 #&gt; 334 Perry Other or unknown 41 #&gt; 335 Perry Seat belt 26 #&gt; 336 Perry Speeding 642 #&gt; 337 Pike Breaks-Lights-etc 47 #&gt; 338 Pike Careless driving 163 #&gt; 339 Pike License-Permit-Insurance 752 #&gt; 340 Pike Other or unknown 329 #&gt; 341 Pike Seat belt 490 #&gt; 342 Pike Speeding 2387 #&gt; 343 Pontotoc Breaks-Lights-etc 16 #&gt; 344 Pontotoc Careless driving 79 #&gt; 345 Pontotoc License-Permit-Insurance 300 #&gt; 346 Pontotoc Other or unknown 89 #&gt; 347 Pontotoc Seat belt 111 #&gt; 348 Pontotoc Speeding 1057 #&gt; 349 Prentiss Breaks-Lights-etc 23 #&gt; 350 Prentiss Careless driving 65 #&gt; 351 Prentiss License-Permit-Insurance 296 #&gt; 352 Prentiss Other or unknown 137 #&gt; 353 Prentiss Seat belt 377 #&gt; 354 Prentiss Speeding 1143 #&gt; 355 Quitman Breaks-Lights-etc 14 #&gt; 356 Quitman Careless driving 47 #&gt; 357 Quitman License-Permit-Insurance 166 #&gt; 358 Quitman Other or unknown 87 #&gt; 359 Quitman Seat belt 223 #&gt; 360 Quitman Speeding 978 #&gt; 361 Rankin Breaks-Lights-etc 5 #&gt; 362 Rankin Careless driving 25 #&gt; 363 Rankin License-Permit-Insurance 100 #&gt; 364 Rankin Other or unknown 41 #&gt; 365 Rankin Seat belt 29 #&gt; 366 Rankin Speeding 156 #&gt; 367 Scott Breaks-Lights-etc 41 #&gt; 368 Scott Careless driving 208 #&gt; 369 Scott License-Permit-Insurance 1237 #&gt; 370 Scott Other or unknown 234 #&gt; 371 Scott Seat belt 649 #&gt; 372 Scott Speeding 2556 #&gt; 373 Sharkey Breaks-Lights-etc 11 #&gt; 374 Sharkey Careless driving 12 #&gt; 375 Sharkey License-Permit-Insurance 43 #&gt; 376 Sharkey Other or unknown 448 #&gt; 377 Sharkey Seat belt 328 #&gt; 378 Sharkey Speeding 930 #&gt; 379 Simpson Breaks-Lights-etc 78 #&gt; 380 Simpson Careless driving 96 #&gt; 381 Simpson License-Permit-Insurance 760 #&gt; 382 Simpson Other or unknown 219 #&gt; 383 Simpson Seat belt 293 #&gt; 384 Simpson Speeding 2035 #&gt; 385 Smith Breaks-Lights-etc 2 #&gt; 386 Smith Careless driving 9 #&gt; 387 Smith License-Permit-Insurance 20 #&gt; 388 Smith Other or unknown 18 #&gt; 389 Smith Seat belt 5 #&gt; 390 Smith Speeding 206 #&gt; 391 Stone Breaks-Lights-etc 35 #&gt; 392 Stone Careless driving 80 #&gt; 393 Stone License-Permit-Insurance 298 #&gt; 394 Stone Other or unknown 180 #&gt; 395 Stone Seat belt 180 #&gt; 396 Stone Speeding 2135 #&gt; 397 Sunflower Breaks-Lights-etc 28 #&gt; 398 Sunflower Careless driving 119 #&gt; 399 Sunflower License-Permit-Insurance 1084 #&gt; 400 Sunflower Other or unknown 144 #&gt; 401 Sunflower Seat belt 518 #&gt; 402 Sunflower Speeding 2029 #&gt; 403 Tallahatchie Breaks-Lights-etc 8 #&gt; 404 Tallahatchie Careless driving 6 #&gt; 405 Tallahatchie License-Permit-Insurance 34 #&gt; 406 Tallahatchie Other or unknown 29 #&gt; 407 Tallahatchie Seat belt 60 #&gt; 408 Tallahatchie Speeding 256 #&gt; 409 Tate Breaks-Lights-etc 50 #&gt; 410 Tate Careless driving 70 #&gt; 411 Tate License-Permit-Insurance 335 #&gt; 412 Tate Other or unknown 126 #&gt; 413 Tate Seat belt 316 #&gt; 414 Tate Speeding 1080 #&gt; 415 Tippah Breaks-Lights-etc 12 #&gt; 416 Tippah Careless driving 58 #&gt; 417 Tippah License-Permit-Insurance 449 #&gt; 418 Tippah Other or unknown 115 #&gt; 419 Tippah Seat belt 357 #&gt; 420 Tippah Speeding 488 #&gt; 421 Tishomingo Breaks-Lights-etc 31 #&gt; 422 Tishomingo Careless driving 41 #&gt; 423 Tishomingo License-Permit-Insurance 278 #&gt; 424 Tishomingo Other or unknown 163 #&gt; 425 Tishomingo Seat belt 433 #&gt; 426 Tishomingo Speeding 746 #&gt; 427 Tunica License-Permit-Insurance 2 #&gt; 428 Tunica Other or unknown 1 #&gt; 429 Tunica Speeding 1 #&gt; 430 Union Breaks-Lights-etc 4 #&gt; 431 Union Careless driving 69 #&gt; 432 Union License-Permit-Insurance 360 #&gt; 433 Union Other or unknown 174 #&gt; 434 Union Seat belt 442 #&gt; 435 Union Speeding 1413 #&gt; 436 Walthall Breaks-Lights-etc 10 #&gt; 437 Walthall Careless driving 34 #&gt; 438 Walthall License-Permit-Insurance 266 #&gt; 439 Walthall Other or unknown 175 #&gt; 440 Walthall Seat belt 156 #&gt; 441 Walthall Speeding 1181 #&gt; 442 Warren Breaks-Lights-etc 36 #&gt; 443 Warren Careless driving 29 #&gt; 444 Warren License-Permit-Insurance 183 #&gt; 445 Warren Other or unknown 360 #&gt; 446 Warren Seat belt 551 #&gt; 447 Warren Speeding 1570 #&gt; 448 Washington Breaks-Lights-etc 31 #&gt; 449 Washington Careless driving 49 #&gt; 450 Washington License-Permit-Insurance 227 #&gt; 451 Washington Other or unknown 106 #&gt; 452 Washington Seat belt 557 #&gt; 453 Washington Speeding 1775 #&gt; 454 Wayne Breaks-Lights-etc 8 #&gt; 455 Wayne Careless driving 159 #&gt; 456 Wayne License-Permit-Insurance 415 #&gt; 457 Wayne Other or unknown 163 #&gt; 458 Wayne Seat belt 461 #&gt; 459 Wayne Speeding 3041 #&gt; 460 Webster Breaks-Lights-etc 1 #&gt; 461 Webster License-Permit-Insurance 14 #&gt; 462 Webster Other or unknown 1 #&gt; 463 Webster Seat belt 10 #&gt; 464 Webster Speeding 130 #&gt; 465 Wilkinson Breaks-Lights-etc 1 #&gt; 466 Wilkinson License-Permit-Insurance 16 #&gt; 467 Wilkinson Other or unknown 6 #&gt; 468 Wilkinson Seat belt 5 #&gt; 469 Wilkinson Speeding 15 #&gt; 470 Winston Breaks-Lights-etc 27 #&gt; 471 Winston Careless driving 85 #&gt; 472 Winston License-Permit-Insurance 696 #&gt; 473 Winston Other or unknown 290 #&gt; 474 Winston Seat belt 294 #&gt; 475 Winston Speeding 2930 #&gt; 476 Yalobusha Breaks-Lights-etc 3 #&gt; 477 Yalobusha Careless driving 13 #&gt; 478 Yalobusha License-Permit-Insurance 48 #&gt; 479 Yalobusha Other or unknown 25 #&gt; 480 Yalobusha Seat belt 125 #&gt; 481 Yalobusha Speeding 108 #&gt; 482 Yazoo Breaks-Lights-etc 28 #&gt; 483 Yazoo Careless driving 86 #&gt; 484 Yazoo License-Permit-Insurance 239 #&gt; 485 Yazoo Other or unknown 105 #&gt; 486 Yazoo Seat belt 202 #&gt; 487 Yazoo Speeding 2868 Now, to make this long data wide, we use pivot_wider from tidyr to turn the driver gender into columns. In addition to our data table we provide pivot_wider with two arguments: names_from describes which column to use for name of the output column, and values_from tells it from column to get the cell values. We’ll use a pipe so we can ignore the data argument. violations_wide &lt;- violations %&gt;% pivot_wider(names_from = violation, values_from = n) violations_wide #&gt; # A tibble: 82 x 7 #&gt; county_name `Breaks-Lights-… `Careless drivi… `License-Permit… #&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 Adams 7 48 118 #&gt; 2 Alcorn 62 100 737 #&gt; 3 Amite 47 86 370 #&gt; 4 Attala 99 113 526 #&gt; 5 Benton 3 9 73 #&gt; 6 Bolivar 57 139 1034 #&gt; 7 Calhoun 26 38 383 #&gt; 8 Carroll 26 40 323 #&gt; 9 Chickasaw 42 53 1378 #&gt; 10 Choctaw 8 6 73 #&gt; # … with 72 more rows, and 3 more variables: `Other or unknown` &lt;int&gt;, `Seat #&gt; # belt` &lt;int&gt;, Speeding &lt;int&gt; 2.3 Wide to long with pivot_longer What if we had the opposite problem, and wanted to go from a wide to long format? For that, we use pivot_longer, which will increase the number of rows and decrease the number of columns. We provide the functino with thee arguments: cols which are the columns we want to pivot into the long format, names_to, which is a string specifying the name of the column to create from the data stored in the column names, and values_to, which is also a string, specifying the name of the column to create from the data stored in cell values. So, to go backwards from violations_wide, and exclude county_name from the long format, we would do the following: violations_long &lt;- violations_wide %&gt;% pivot_longer(cols = -county_name, # exclude column with county name names_to = &quot;violation&quot;, # name is a string! values_to = &quot;n&quot;) # also a string violations_long #&gt; # A tibble: 492 x 3 #&gt; county_name violation n #&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 Adams Breaks-Lights-etc 7 #&gt; 2 Adams Careless driving 48 #&gt; 3 Adams License-Permit-Insurance 118 #&gt; 4 Adams Other or unknown 35 #&gt; 5 Adams Seat belt 229 #&gt; 6 Adams Speeding 505 #&gt; 7 Alcorn Breaks-Lights-etc 62 #&gt; 8 Alcorn Careless driving 100 #&gt; 9 Alcorn License-Permit-Insurance 737 #&gt; 10 Alcorn Other or unknown 418 #&gt; # … with 482 more rows We could also have used a specification for what columns to include. This can be useful if you have a large number of identifying columns, and it’s easier to specify what to gather than what to leave alone. And if the columns are adjacent to each other, we don’t even need to list them all out – we can use the : operator! violations_wide %&gt;% pivot_longer(cols = `Breaks-Lights-etc`:Speeding, # this also works names_to = &quot;violation&quot;, values_to = &quot;n&quot;) #&gt; # A tibble: 492 x 3 #&gt; county_name violation n #&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; #&gt; 1 Adams Breaks-Lights-etc 7 #&gt; 2 Adams Careless driving 48 #&gt; 3 Adams License-Permit-Insurance 118 #&gt; 4 Adams Other or unknown 35 #&gt; 5 Adams Seat belt 229 #&gt; 6 Adams Speeding 505 #&gt; 7 Alcorn Breaks-Lights-etc 62 #&gt; 8 Alcorn Careless driving 100 #&gt; 9 Alcorn License-Permit-Insurance 737 #&gt; 10 Alcorn Other or unknown 418 #&gt; # … with 482 more rows There are many powerful operations you can do with the pivot_* functions. To learn more review the vignette: vignette(&quot;pivot&quot;) Challenge 1.From the stops dataframe create a wide data frame tr_wide with “year” as columns, each row is a different violation, and the values are the number of traffic stops per each violation, roughly like this: violation | 2013 | 2014 | 2015 ... Break-Lights | 65 | 54| 67 ... Speeding | 713 | 948| 978 ... ... Use year() from the lubridate package. Hint: You will need to summarize and count the traffic stops before reshaping the table. Now take the data frame, and make it long again, so each row is a unique violation - year combination, like this: violation | year | n of stops Speeding | 2013 | 65 Speeding | 2014 | 54 ... etc 2.4 Exporting data Similar to the read_csv() function used for reading CSV files into R, there is a write_csv() function that generates CSV files from data frames. Before using write_csv(), we are going to create a new folder, data_output, in our working directory that will store this generated dataset. We don’t want to write generated datasets in the same directory as our raw data. It’s good practice to keep them separate. The data folder should only contain the raw, unaltered data, and should be left alone to make sure we don’t delete or modify it. In contrast, our script will generate the contents of the data_output directory, so even if the files it contains are deleted, we can always re-generate them. We can now save the table generated above in our data_output folder: write_csv(violation_wide, &quot;data_output/county_violations.csv&quot;) "]]
